<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.parim.sns.modules.sys.repository.UserRepository">

	<insert id="insert" useGeneratedKeys="true" keyProperty="id"  parameterType="net.parim.sns.modules.sys.entity.User">
		<selectKey resultType="long" order="BEFORE" keyProperty="id">
		select nextval('general') as "id"
		</selectKey>
		INSERT INTO `ila_user` (
			`id`,
			`email`,
			`user_group_id`,
			`username`,
			`password`,
			`salt`,
			`first_name`,
			`last_name`,
			`familiar_name`,
			`site_id`,
			`start_date`,
			`end_date`,
			`allow_update`,
			`created_by`,
			`create_date`,
			`last_updated_by`,
			`last_update_date`
		)
		VALUES
			(
				#{id},
				#{email},
				#{userGroup.id},
				#{username},
				#{password},
				#{salt},
				#{firstName},
				#{lastName},
				#{familiarName},
				#{site.id},
				now(),
				#{endDate},
				#{allowUpdate},
				#{createdBy.id},
				now(),
				#{lastUpdatedBy.id},
				now()
			)
	</insert>
	
	<update id="update" parameterType="net.parim.sns.modules.sys.entity.User">
		update `ila_user` set
			`id`=#{id},
			`email`=#{email},
			`user_group_id`=#{userGroup.id},
			`username`=#{username},
			<!-- `password`=#{password},
			`salt`=#{salt}, -->
			`first_name`=#{firstName},
			`last_name`=#{lastName},
			`familiar_name`=#{familiarName},
			`site_id`=#{site.id},
			`start_date`=#{startDate},
			`end_date`=#{endDate},
			`allow_update`=#{allowUpdate},
			`last_updated_by`=#{lastUpdatedBy.id},
			`last_update_date`=now()
		where id = #{id}
	</update>
	
	<delete id="delete" parameterType="long">
		delete `sns_user` where id = #{id}
	</delete>
	
	<select id="findOne" parameterType="long" resultType="net.parim.sns.modules.sys.entity.User">
		select u.`id`,
			u.`email`,
			u.`user_group_id` as "userGroup.id",
			u.`username`,
			u.`password`,
			u.`salt`,
			u.`first_name`,
			u.`last_name`,
			u.`familiar_name`,
			u.`site_id` as "site.id",
			u.`start_date`,
			u.`end_date`,
			u.`allow_update`,
			u.`created_by` as "createdBy.id",
			u.`create_date`,
			u.`last_updated_by` as "lastUpdatedBy.id",
			u.`last_update_date`,
			s.name as "site.name",
			g.name as "userGroup.name",
			uc.username as "createdBy.username",
			uc.first_name as "createdBy.firstName",
			uc.last_name as "createdBy.lastName",
			ul.username as "lastUpdatedBy.username",
			ul.first_name as "lastUpdatedBy.firstName",
			ul.last_name as "lastUpdatedBy.lastName"
		from `ila_user` u
			left join site s on s.id = u.site_id
			left join user_group g on g.id = u.user_group_id
			left join ila_user uc on uc.id = s.created_by
			left join ila_user ul on ul.id = s.last_updated_by
		where u.id = #{id}
	</select>
	
	<select id="findAll" resultType="net.parim.sns.modules.sys.entity.User">
		select u.id,
			u.username,
			u.site_id as "site.id",
			u.email,
			u.user_group_id "userGroup.id",
			s.name as "site.name",
			g.name as "userGroup.name"
		from ila_user u
			left join site s on s.id = u.site_id
			left join user_group g on g.id = u.user_group_id
		<where>
			1=1
			<if test="site != null and site.id != null">
				and u.site_id = #{site.id}
			</if>
			<if test="userGroup != null and userGroup != null">
				and u.user_group_id = #{userGroup.id}
			</if>
		</where>
	</select>
	
	<select id="findUserByUsername" parameterType="string" resultType="net.parim.sns.modules.sys.entity.User">
		select id, username, password, email from `sns_user` where username = #{username}
	</select>
	
</mapper>